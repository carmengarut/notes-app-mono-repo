{"version":3,"sources":["services/notes.js","services/login.js","components/Notification.js","components/Note.js","i18n/index.js","components/Toggable.js","components/LoginForm.js","components/NoteForm.js","App.js","index.js"],"names":["baseUrl","token","setToken","newToken","login","credentials","a","axios","post","data","Notification","message","className","Note","note","toggleImportance","label","important","content","onClick","es","CANCEL_BUTTON","Toggable","forwardRef","ref","children","buttonLabel","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","displayName","LoginForm","props","onSubmit","handleLogin","type","value","username","name","placeholder","onChange","handleUsernameChange","password","handlePasswordChange","id","NoteForm","addNote","handleLogout","newNote","setNewNote","toggableRef","useRef","event","preventDefault","current","target","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","setUsername","setPassword","user","setUser","useEffect","get","then","response","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","toggleImportanceOf","find","n","changedNote","newObject","config","headers","Authorization","put","update","returnedNote","map","catch","error","console","setTimeout","userToSet","setItem","stringify","log","notesToShow","filter","noteObject","create","prev","e","removeItem","i","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eabc2c3e.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nexport const setToken = newToken => {\n  token = `Bearer ${newToken}`\n}\nexport const getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nexport const create = (newObject) => {\n  const config = {\n    headers: {\n      Authorization: token\n    }\n  }\n  const request = axios.post(baseUrl, newObject, config)\n  return request.then(response => response.data)\n}\n\nexport const update = (id, newObject) => {\n  const config = {\n    headers: {\n      Authorization: token\n    }\n  }\n  const request = axios.put(`${baseUrl}/${id}`, newObject, config)\n  return request.then(response => response.data)\n}\n","import axios from 'axios'\nconst baseUrl = '/api/login/'\n\nexport const login = async credentials => {\n  const { data } = await axios.post(baseUrl, credentials)\n  return data\n}\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important'\n    : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","export const es = {\n  TOGGABLE: {\n    CANCEL_BUTTON: 'Cancel'\n  }\n}\n","import React, { forwardRef, useImperativeHandle, useState } from 'react'\nimport propTypes from 'prop-types'\nimport { es } from '../i18n/index'\n\nconst Toggable = forwardRef(({ children, buttonLabel = 'show' }, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => setVisible(!visible)\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {children}\n        <button onClick={toggleVisibility}>{es.TOGGABLE.CANCEL_BUTTON}</button>\n      </div>\n    </div>\n  )\n})\n\nToggable.displayName = 'Toggable' // Esto es para que en el warning si faltan proptypes aparezca bien el nombre del componente y no el forwardRef\n\nToggable.propTypes = {\n  buttonLabel: propTypes.string\n}\n\nexport default Toggable\n","import React from 'react'\nimport Toggable from './Toggable'\nimport propTypes from 'prop-types'\nexport default function LoginForm (props) {\n  return (\n    <Toggable buttonLabel='Show login'>\n      <form onSubmit={props.handleLogin}>\n        <div>\n          <input\n            type='text'\n            value={props.username}\n            name='Username'\n            placeholder='Username'\n            onChange={props.handleUsernameChange}\n          />\n        </div>\n        <div>\n          <input\n            type='password'\n            value={props.password}\n            name='Password'\n            placeholder='Password'\n            onChange={props.handlePasswordChange}\n          />\n        </div>\n        <button id='form-login-button'>\n          Login\n        </button>\n      </form>\n    </Toggable>\n  )\n}\n\nLoginForm.propTypes = {\n  handleSubmit: propTypes.func.isRequired,\n  username: propTypes.string\n}\n","import React, { useRef, useState } from 'react'\nimport Toggable from './Toggable'\n\nexport default function NoteForm ({ addNote, handleLogout }) {\n  const [newNote, setNewNote] = useState('')\n  const toggableRef = useRef()\n\n  const handleChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    const noteObject = {\n      content: newNote,\n      important: false\n    }\n\n    addNote(noteObject)\n    setNewNote('')\n    toggableRef.current.toggleVisibility()\n  }\n\n  return (\n    <Toggable buttonLabel='New Note' ref={toggableRef}>\n      <h3>Create a new note</h3>\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          placeholder='Write your note content'\n          onChange={handleChange}\n          value={newNote}\n        />\n        <button type='submit'>\n          Save\n        </button>\n      </form>\n      <button onClick={handleLogout}>\n        Logout\n      </button>\n    </Toggable>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { setToken, getAll, create, update } from './services/notes'\nimport { login } from './services/login'\nimport Notification from './components/Notification'\nimport Note from './components/Note'\nimport LoginForm from './components/LoginForm'\nimport NoteForm from './components/NoteForm'\n\nfunction App () {\n  const [notes, setNotes] = useState([])\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    getAll().then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteAppUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      setToken(user.token)\n    }\n  }, [])\n\n  const addNote = (noteObject) => {\n    create(noteObject)\n      .then(returnedNote => setNotes(prev => [...prev, returnedNote]))\n      .catch((e) => {\n        console.error(e)\n      })\n  }\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(`Note '${note.content}' was already removed from server`)\n        console.error(error)\n        setTimeout(() => {\n          setErrorMessage()\n        }, 5000)\n      })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const userToSet = await login({\n        username,\n        password\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteAppUser', JSON.stringify(userToSet)\n      )\n\n      setToken(userToSet.token)\n      setUser(userToSet)\n      setUsername('')\n      setPassword('')\n    } catch (e) {\n      console.log(e.name)\n      console.log(e.message)\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const handleLogout = () => {\n    setUser(null)\n    setToken(user.token)\n    window.localStorage.removeItem('loggedNoteAppUser')\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      {\n        user\n          ? <NoteForm\n              addNote={addNote}\n              handleLogout={handleLogout}\n            />\n          : <LoginForm\n              username={username}\n              password={password}\n              handleLogin={handleLogin}\n              handleUsernameChange={({ target }) => setUsername(target.value)}\n              handlePasswordChange={({ target }) => setPassword(target.value)}\n            />\n      }\n\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}